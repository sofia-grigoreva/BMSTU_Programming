(define (derivative x)
  (begin
    (define (peremen? n)
      (equal? n 'x))
    (define (sum x)
      (if (null? x)
          (list)
          (cons (derivative x) (sum (cdr x)))))
    (if (not (list? x))
        (set! x (list x)))
    (if (list? (car x)) (set! x (car x)))
    (cond
      ((number? (car x)) 0)
      ((peremen? (car x)) 1)
      ((equal? (car x) '-x) -1)
      ((and (equal? (car x) '-) (equal? (cadr x) 'x)  -1))
      ((or (equal? (car x) '+) (equal? (car x) '-)) (cons (car x) (sum (cdr x))))
      ((equal? (car x) '*) (if (number? (cadr x))
                               (if (> (length x) 3)
                                   (list '* (cadr x) (derivative (cons '* (cddr x))))
                                   (list '* (cadr x) (derivative (caddr x))))
                               (if (= (length x) 4)
                               (list '+ (list '* (derivative (cadr x)) (cadddr x) (caddr x))
                                     (list '* (cadr x) (cadddr x) (derivative (caddr x)))
                                     (list '* (cadr x) (caddr x) (derivative (cadddr x))))    
                               (list '+ (list '* (derivative (cadr x)) (caddr x))
                                     (list '* (cadr x) (derivative (caddr x)))))))
      
      ((equal? (car x) '/) (list '/ (list '- (list '* (derivative (cadr x)) (caddr x))
                                          (list '* (cadr x) (derivative (caddr x))))
                                 (list 'expt (caddr x) 2)))
      
      ((equal? (car x) 'cos) (if (equal? 1 (derivative (cadr x)))
                                 (list '* -1 (list 'sin (cadr x)))
                                 (list '* -1 (list 'sin (cadr x))
                                       (derivative (cadr x)))))
      
      ((equal? (car x) 'sin) (if (equal? 1 (derivative (cadr x)))
                                 (list 'cos (cadr x))
                                 (list '* (list 'cos (cadr x)) (derivative (cadr x)))))
      
      ((equal? (car x) 'log) (if (equal? 1 (derivative (cadr x)))
                                 (list '/ 1 (cadr x))
                                 (list '/ (derivative (cadr x)) (cadr x))))
      
      ((equal? (car x) 'expt) (if (peremen? (cadr x))
                                  (list '* (caddr x) (list 'expt (cadr x) (- (caddr x) 1)))
                                  (list '*  (list 'log (cadr x))  x )))
      
      ((equal? (car x) 'exp) (if (equal? 1 (derivative (cadr x)))
                                 (list 'exp (cadr x)) 
                                 (list '* (list 'exp (cadr x)) (derivative (cadr x)))))
      )))
