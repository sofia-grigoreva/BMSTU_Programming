(define (interpret program stack)
  (letrec ((index (lambda (program n closeword)
                    (if (equal? (vector-ref program n) closeword)
                        n
                        (index program (+ 1 n) closeword)))))
    
    (define (readword program nslova stack slovar stackv)
      (begin                              
        (if (or (<= (vector-length program) nslova))
            stack
            (begin 
              (cond
                ((integer? (vector-ref program nslova))
                 (set! stack (cons (vector-ref program nslova) stack)))
                ((equal? (vector-ref program nslova) '+)
                 (set! stack (cons (+ (cadr stack) (car stack))
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) '-)
                 (set! stack (cons (- (cadr stack) (car stack))
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) '*)
                 (set! stack (cons (* (cadr stack) (car stack))
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) '/)
                 (set! stack (cons (/ (cadr stack) (car stack))
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) 'mod)
                 (set! stack (cons (remainder (cadr stack) (car stack))
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) 'neg)
                 (set-car! stack (* (car stack) -1)))
                ((equal? (vector-ref program nslova) '=)
                 (set! stack (cons (if (= (cadr stack) (car stack)) -1 0)
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) '>)
                 (set! stack (cons (or (and (> (cadr stack)(car stack)) -1) 0)
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) '<)
                 (set! stack (cons (or (and (< (cadr stack)(car stack)) -1) 0)
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) 'and)
                 (set! stack (cons (if (or (= (car stack) 0)
                                           (= (cadr stack) 0)) 0 -1)
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) 'or)
                 (set! stack (cons (if (and (= (car stack) 0)
                                            (= (cadr stack) 0)) 0 -1)
                                   (cddr stack))))
                ((equal? (vector-ref program nslova) 'not)
                 (set! stack (cons (if (= 0 (car stack)) -1 0) (cdr stack))))
                ((equal? (vector-ref program nslova) 'drop)
                 (set! stack (cdr stack)))
                ((equal? (vector-ref program nslova) 'swap)
                 (set! stack (cons (cadr stack)
                                   (cons (car stack) (cddr stack)))))                  
                ((equal? (vector-ref program nslova) 'dup)
                 (set! stack (cons (car stack) stack)))                  
                ((equal? (vector-ref program nslova) 'over)
                 (set! stack (cons (cadr stack) stack)))                  
                ((equal? (vector-ref program nslova) 'rot)
                 (set! stack (cons (caddr stack)
                                   (cons (cadr stack)
                                         (cons (car stack) (cdddr stack))))))                  
                ((equal? (vector-ref program nslova) 'depth)
                 (set! stack (cons (length stack) stack)))                  
                ((equal? (vector-ref program nslova) 'if)
                 (begin  (if (equal? (car stack) 0)
                             (set! nslova (index program nslova 'endif)))
                         (set! stack (cdr stack))))                             
                ((equal? (vector-ref program nslova) 'define)
                 (begin (set! slovar (cons (cons (vector-ref program (+ 1 nslova))
                                                 (list (+ 1 nslova))) slovar))
                        (set! nslova (index program nslova 'end))))                             
                ((assoc (vector-ref program nslova) slovar)
                 (begin (set! stackv (cons (+ 1 nslova) stackv))
                        (set! nslova (cadr
                                      (assoc (vector-ref program nslova)
                                             slovar)))))
                ((equal? (vector-ref program nslova) 'exit)
                 (begin (set! nslova (- (car stackv) 1))
                        (set! stackv (cdr stackv))))                             
                ((equal? (vector-ref program nslova) 'end)
                 (begin (set! nslova (- (car stackv) 1))
                        (set! stackv (cdr stackv))))                               
                ) 
              (readword program (+ nslova 1) stack slovar stackv)))))     
    (readword program 0 stack '() '())))
