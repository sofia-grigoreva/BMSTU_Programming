% Рубежный контроль № 3: Конспект по скриптовому языку Python
% 28 декабря 2023 г.
% Григорьева Софья, ИУ9-11Б

# 1) Типизация и система типов языкa.

Python является языком с сильной динамической неявной типизацией. 
(Тип переменной/функции известен только во время выполнения программы,
неявные преобразования типов запрещены, тип данных можно не указывать)

Встроенные типы данных:

1. Числа 
       (int - целые числа
	float - числа с плавающей точкой
	complex - комплексные числа)
2. Строки (str)
3. Списки (list)
4. Кортежи (tup)
5. Словари (dict)
6. Множества (set)
7. Логический тип (bool)

Типы данных языка делятся на изменяемые и неизменяемые. 
К неизменяемым относятся int, float, complex, str, tup, frozenset (неизменяемая версия set), 
а к изменяемым — list, dict, set. 

В Python для получения типа объекта используется функция `type()`. 

```python
type(объект) - тип объекта
```

В Python есть пользовательские типы данных. 
Одним из способов определения пользовательских типов данных является создание классов. 
Классы позволяют определить новый тип, 
который может иметь свои атрибуты (переменные) и методы (функции).


# 2) Основные управляющие конструкции.

1. Условные выражения: `if`, `else`, `elif`.

```python
if условие1:
    # выполняется, если условие1 истинно
    выражение
elif условие2:
    # выполняется, если условие1 ложно, а условие2 истинно
    выражение
else:
    # выполняется, если все предыдущие условия ложны
    выражение
```

Оператор `elif` может присутствовать произвольное количество раз или отсутствовать вовсе. 
Оператор `else` может быть не использован или использован один раз. 

2. Циклы: `for`, `while`.

```python
for элемент in последовательность:
    # выполняется для каждого элемента в последовательности
    выражение

while условие:
    # выполняется, пока условие истинно
    выражение
``` 

3. Операторы: `break`, `continue`.

`Break` используется для прерывания выполнения цикла и выхода из него.

`Сontinue` используется для пропуска текущей итерации цикла 
и перехода к следующей итерации.

4. Операторы: `def`, `lambda`.

Используются для определения пользовательских функций.

```python
def название_функции(аргументы):
    выражение

lambda аргументы: выражение
```

# 3) Подмножество языка для функционального программирования.

В Python иммутабельность данных можно обеспечить при помощи неизменяемых типов данных.

Функции в Python являются объектами первого класса. 
Они могут быть присвоены переменным,
переданы в качестве аргументов другим функциям и возвращены из функций.

Python поддерживает функции высших порядков.

Встроенные функции высших порядков для работы с последовательностями:

1. `Map()`

Применяет указанную функцию к каждому элементу последовательности
и возвращает новую последовательность с результатами.

```python
map(функция, последовательность)
```

2. `Filter()`

Фильтрует элементы последовательности на основе указанного условия
и возвращает новую последовательность с отфильтрованными элементами.

```python
filter(условие, последовательность)
```

3. `Reduce()`

Применяет указанную функцию к элементам последовательности, 
последовательно сворачивая ее до получения одного результата.

Для использования функции `reduce()` необходимо импортировать ее из модуля functools.

```python
reduce(функция, последовательность)
```

# 4) Важнейшие функции для работы с потоками ввода/вывода, строками, регулярными выражениями.

`input()` - Считывает и возвращает строку данных в виде строки.
`print()` - Выводит строку с добавлением символа новой строки.

Для работы с потоками ввода/вывода в Python используется функции из модуля sys
(sys.stdin, sys.stdout, sys.stderr) и 
функции (`readline()`, `readlines()`, `write()`, `writelines()`).

`sys.stdin.readline()` 
- Считывает и возвращает одну строку из стандартного потока вводa.

`sys.stdin.readlines()` 
- Считывает все строки из стандартного потока ввода и возвращает список строк.

`sys.stdout.write()`
- Выводит строку в стандартный поток вывода без добавления символа новой строки.

`sys.stdout.writelines()`
- Выводит список строк в стандартный поток вывода без добавления символов новой строки.

`sys.stderr.write()` 
- Выводит строку в поток стандартного вывода ошибок.

Работа со строками.

`строка[индекс]` 
- Обращение к символу в строке по индексу.

`строка[индекс1:индекс2:шаг]` 
- Извлекает часть строки с индекс1 по индекс2 не включительно,
с шагом шаг (по умолчанию равен 1).

`строка + строка`
- Конкатенация cтрок.

`строка * n`
- Дублирует строку n раз.

`len(строка)` 
- Возвращает длину строки.
 
`строка.split(разделитель)` 
- Разделяет строку на список подстрок, используя разделитель.

`разделитель.join(последовательность)` 
- Объединяет элементы последовательности в строку, используя разделитель.

`строка.replace(старая_подстрока, новая_подстрока)` 
- Заменяет все вхождения одной подстроки на другую в строке.

`строка.find(подстрока)` 
- Ищет первое вхождение подстроки в строке и возвращает индекс первого символа.

Для работы с регулярными выражениями в Python используется модуль re. 

Основные функций модуля re:

`re.search()` 
- Ищет первое вхождение шаблона в строке и возвращает объект с информацией о совпадении.

`re.match()` 
- Ищет совпадение шаблона в начале строки и возвращает объект с информацией о совпадении.

`re.findall()` 
- Ищет все непересекающиеся совпадения шаблона в строке и возвращает список совпадений.

`re.sub()` 
- Заменяет все совпадения шаблона в строке на указанную подстроку.

`re.split()` 
- Разделяет строку по заданному шаблону.

`re.compile()` 
- Компилирует шаблон в объект регулярного выражения, 
который может быть использован для выполнения поиска и замены.
